{"map":"{\"version\":3,\"sources\":[\"/Users/cmokj/Documents/demos/todolist-demo/src/TodoInput.js\",\"/Users/cmokj/Documents/demos/todolist-demo/src/TodoItem.js\",\"/Users/cmokj/Documents/demos/todolist-demo/src/App.js\",\"/Users/cmokj/Documents/demos/todolist-demo/src/localStore.js\",\"/Users/cmokj/Documents/demos/todolist-demo/src/serviceWorker.js\",\"/Users/cmokj/Documents/demos/todolist-demo/src/index.js\"],\"names\":[\"TodoInput\",\"react_default\",\"a\",\"createElement\",\"type\",\"value\",\"this\",\"props\",\"content\",\"className\",\"onChange\",\"changeTitle\",\"bind\",\"onKeyPress\",\"submit\",\"e\",\"key\",\"onSubmit\",\"Component\",\"TodoItem\",\"checked\",\"todo\",\"status\",\"toggle\",\"title\",\"onClick\",\"delete\",\"onToggle\",\"onDelete\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"newTodo\",\"todoList\",\"JSON\",\"parse\",\"window\",\"localStorage\",\"getItem\",\"_this2\",\"todos\",\"filter\",\"item\",\"deleted\",\"map\",\"index\",\"TodoItem_TodoItem\",\"TodoInput_TodoInput\",\"addTodo\",\"setItem\",\"stringify\",\"setState\",\"event\",\"target\",\"push\",\"id\",\"idMaker\",\"Boolean\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport './TodoInput.css'\\n\\nexport default class TodoInput extends Component {\\n    render() {\\n        return <input type=\\\"text\\\" value={this.props.content}\\n            className=\\\"TodoInput\\\"\\n            onChange={this.changeTitle.bind(this)}\\n            onKeyPress={this.submit.bind(this)} />\\n    }\\n    submit(e) {\\n        if (e.key === 'Enter') {\\n            this.props.onSubmit(e)\\n        }\\n    }\\n    changeTitle(e) {\\n        this.props.onChange(e)\\n    }\\n}\\n\",\"import React, { Component } from 'react'\\nimport './TodoItem.css'\\n\\nexport default class TodoItem extends Component {\\n    render() {\\n        return (\\n            <div className=\\\"TodoItem\\\">\\n                <input type=\\\"checkbox\\\" checked={this.props.todo.status === 'completed'}\\n                    onChange={this.toggle.bind(this)} />\\n                <span className=\\\"title\\\">{this.props.todo.title}</span>\\n                <button onClick={this.delete.bind(this)}>删除</button>\\n            </div>\\n        )\\n    }\\n    toggle(e) {\\n        this.props.onToggle(e, this.props.todo)\\n    }\\n    delete(e) {\\n        this.props.onDelete(e, this.props.todo)\\n    }\\n}\",\"import React, { Component } from 'react'\\nimport 'normalize.css'\\nimport './reset.css'\\nimport './App.css'\\nimport TodoInput from './TodoInput'\\nimport TodoItem from './TodoItem'\\nimport * as localStore from './localStore'\\n\\nclass App extends Component {\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      newTodo: '',\\n      todoList: localStore.load('todoList') || []\\n    }\\n  }\\n  render() {\\n    let todos = this.state.todoList\\n      .filter((item) => !item.deleted)\\n      .map((item, index) => {\\n        return (\\n          <li key={index}>\\n            <TodoItem todo={item} onToggle={this.toggle.bind(this)}\\n              onDelete={this.delete.bind(this)} />\\n          </li>\\n        )\\n      })\\n    return (\\n      <div className=\\\"App\\\">\\n        <h1>待办事项</h1>\\n        <div className=\\\"inputWrapper\\\">\\n          <TodoInput content={this.state.newTodo}\\n            onChange={this.changeTitle.bind(this)}\\n            onSubmit={this.addTodo.bind(this)} />\\n          <ol className=\\\"todoList\\\">\\n            {todos}\\n          </ol>\\n        </div>\\n      </div>\\n    )\\n  }\\n  componentDidUpdate() {\\n    localStore.save('todoList', this.state.todoList)\\n  }\\n  delete(e, todo) {\\n    todo.deleted = true;\\n    this.setState(this.state);\\n  }\\n  toggle(e, todo) {\\n    todo.status = todo.status === 'completed' ? '' : 'completed';\\n    this.setState(this.state);\\n  }\\n  changeTitle(event) {\\n    this.setState({\\n      newTodo: event.target.value,\\n      todoList: this.state.todoList\\n    })\\n  }\\n  addTodo(event) {\\n    this.state.todoList.push({\\n      id: idMaker(),\\n      title: event.target.value,\\n      status: null,\\n      deleted: false\\n    })\\n    this.setState({\\n      newTodo: '',\\n      todoList: this.state.todoList\\n    })\\n  }\\n}\\nlet id = 0;\\nfunction idMaker() {\\n  id += 1;\\n  return id;\\n}\\n\\nexport default App;\\n\",\"export function save(key, value) {\\n    return window.localStorage.setItem(key, JSON.stringify(value))\\n}\\n\\nexport function load(key) {\\n    return JSON.parse(window.localStorage.getItem(key))\\n}\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,,function(t,e,n){t.exports=n(20)},,,,,,function(t,e,n){},,function(t,e,n){},function(t,e,n){},function(t,e,n){},function(t,e,n){},function(t,e,n){\"use strict\";n.r(e);var o=n(0),a=n.n(o),i=n(7),s=n.n(i),c=(n(14),n(1)),r=n(2),l=n(4),u=n(3),d=n(5),h=(n(15),n(16),n(17),n(18),function(t){function e(){return Object(c.a)(this,e),Object(l.a)(this,Object(u.a)(e).apply(this,arguments))}return Object(d.a)(e,t),Object(r.a)(e,[{key:\"render\",value:function(){return a.a.createElement(\"input\",{type:\"text\",value:this.props.content,className:\"TodoInput\",onChange:this.changeTitle.bind(this),onKeyPress:this.submit.bind(this)})}},{key:\"submit\",value:function(t){\"Enter\"===t.key&&this.props.onSubmit(t)}},{key:\"changeTitle\",value:function(t){this.props.onChange(t)}}]),e}(o.Component)),p=(n(19),function(t){function e(){return Object(c.a)(this,e),Object(l.a)(this,Object(u.a)(e).apply(this,arguments))}return Object(d.a)(e,t),Object(r.a)(e,[{key:\"render\",value:function(){return a.a.createElement(\"div\",{className:\"TodoItem\"},a.a.createElement(\"input\",{type:\"checkbox\",checked:\"completed\"===this.props.todo.status,onChange:this.toggle.bind(this)}),a.a.createElement(\"span\",{className:\"title\"},this.props.todo.title),a.a.createElement(\"button\",{onClick:this.delete.bind(this)},\"\\u5220\\u9664\"))}},{key:\"toggle\",value:function(t){this.props.onToggle(t,this.props.todo)}},{key:\"delete\",value:function(t){this.props.onDelete(t,this.props.todo)}}]),e}(o.Component));var m=function(t){function e(t){var n,o;return Object(c.a)(this,e),(n=Object(l.a)(this,Object(u.a)(e).call(this,t))).state={newTodo:\"\",todoList:(o=\"todoList\",JSON.parse(window.localStorage.getItem(o))||[])},n}return Object(d.a)(e,t),Object(r.a)(e,[{key:\"render\",value:function(){var t=this,e=this.state.todoList.filter(function(t){return!t.deleted}).map(function(e,n){return a.a.createElement(\"li\",{key:n},a.a.createElement(p,{todo:e,onToggle:t.toggle.bind(t),onDelete:t.delete.bind(t)}))});return a.a.createElement(\"div\",{className:\"App\"},a.a.createElement(\"h1\",null,\"\\u5f85\\u529e\\u4e8b\\u9879\"),a.a.createElement(\"div\",{className:\"inputWrapper\"},a.a.createElement(h,{content:this.state.newTodo,onChange:this.changeTitle.bind(this),onSubmit:this.addTodo.bind(this)}),a.a.createElement(\"ol\",{className:\"todoList\"},e)))}},{key:\"componentDidUpdate\",value:function(){var t,e;t=\"todoList\",e=this.state.todoList,window.localStorage.setItem(t,JSON.stringify(e))}},{key:\"delete\",value:function(t,e){e.deleted=!0,this.setState(this.state)}},{key:\"toggle\",value:function(t,e){e.status=\"completed\"===e.status?\"\":\"completed\",this.setState(this.state)}},{key:\"changeTitle\",value:function(t){this.setState({newTodo:t.target.value,todoList:this.state.todoList})}},{key:\"addTodo\",value:function(t){this.state.todoList.push({id:f(),title:t.target.value,status:null,deleted:!1}),this.setState({newTodo:\"\",todoList:this.state.todoList})}}]),e}(o.Component),b=0;function f(){return b+=1}var g=m;Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(a.a.createElement(g,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(t){t.unregister()})}],[[8,1,2]]]);","extractedComments":[]}